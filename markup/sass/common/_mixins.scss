@charset "utf-8";
/* mixins.scss */

// sprite
@mixin include-sprite($spritesheetName:null, $important:null){
	@if $spritesheetName == 'spr_img' {
		@include spr_img($important);
	} @else if $spritesheetName == 'spr_img_2x' {
		@include spr_img_2x($important);
	} @else if $spritesheetName == 'spr_spot_img' {
		@include spr_spot_img($important);
	} @else if $spritesheetName == 'spr_spot_img_2x' {
		@include spr_spot_img_2x($important);
	}
}
@mixin use-sprite-normal($filename, $map:$spr_img, $retinaMap:null, $retina:false, $important:null, $mediaquery:false, $x2:false) {
	@include use-sprite($filename, $map, $retinaMap, $retina, $important, $mediaquery, $x2);
}
@mixin use-sprite-retina($filename, $map:$spr_img_2x, $retinaMap:null, $retina:true, $important:null, $mediaquery:true, $x2:false) {
	@include use-sprite($filename, $map, $retinaMap, $retina, $important, $mediaquery, $x2);
}
@mixin use-sprite-important($filename, $map:$spr_img, $retinaMap:$spr_img_2x, $retina:false, $important:true, $mediaquery:false, $x2:true) {
	@include use-sprite($filename, $map, $retinaMap, $retina, $important, $mediaquery, $x2);
}
@mixin use-sprite($filename, $map:$spr_img, $retinaMap:$spr_img_2x, $retina:false, $important:null, $mediaquery:false, $x2:true) {
	$dimension-map: map-get($map, $filename);
	$spritesheet-name: map-get($map, spritesheet_name);
	$importantTxt: null !default;

	@if $important {
		$importantTxt : unquote('!important');
	}

	@if $retina {
		$width: ceil(map-get($dimension-map, width_retina)) !global;
		$height: ceil(map-get($dimension-map, height_retina)) !global;
		$bgOffsetX: floor(map-get($dimension-map, offset_x_retina)) !global;
		$bgOffsetY: ceil(map-get($dimension-map, offset_y_retina)) !global;
		$bgSize: ceil(map-get($map, total_width_retina)) auto !global;
	} @else {
		$width: map-get($dimension-map, width) !global;
		$height: map-get($dimension-map, height) !global;
		$bgOffsetX: map-get($dimension-map, offset_x) !global;
		$bgOffsetY: map-get($dimension-map, offset_y) !global;
		$bgSize: map-get($map, total_width) auto !global;
	}

	@if $mediaquery {
		@include hdpi {
			& {
				width: $width $importantTxt;
				height: $height $importantTxt;
				background-position: $bgOffsetX $bgOffsetY $importantTxt;
				background-size: $bgSize $importantTxt;
				@include include-sprite($spritesheet-name, $important);
			}
		}
	} @else {
		width: $width $importantTxt;
		height: $height $importantTxt;
		background-position: $bgOffsetX $bgOffsetY $importantTxt;

		@if $retina {
			background-size: $bgSize $importantTxt;
		}

		@include include-sprite($spritesheet-name, $important);
	}

	@if $x2 {
		@include use-sprite-retina($filename: $filename, $map: $retinaMap, $retinaMap: null, $retina: true, $important: $important, $mediaquery: true, $x2: false);
	}
}
@mixin hdpi($ratio: 1.3){
	@media only screen and (-webkit-min-device-pixel-ratio: $ratio),
	only screen and (min--moz-device-pixel-ratio: $ratio),
	only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
	only screen and (min-resolution: #{round($ratio*96)}dpi),
	only screen and (min-resolution: #{$ratio}dppx) {
		@content;
	}
}

@mixin clear($content: '') {
	&:before, &:after{
		display: table;
		content: $content;
	}

	&:after{
		clear: both;
	}
}

@mixin overflowY{
	overflow: hidden;
	overflow-y: auto;
	-webkit-overflow-scrolling: touch;
}

// 기본 Tablets 설정값
@mixin gMobileTablet($width: 600px, $height: 450px) {
	@media screen and (min-width: $width) and (min-height: $height){
		@content;
	}
}

// landscape Phablet ~ Pad
@mixin gPhablet($width: 640px) {
	@media screen and (min-width: $width) {
		@content;
	}
}

@mixin g_invisible {
	overflow: hidden;
	position: absolute;
	clip: rect(0 0 0 0);
	width: 1px;
	height: 1px;
	margin: -1px;
}

@mixin contentElement($display:inline-block) {
	display: $display;
	content: '';
}

@mixin color-set($font-color,$background-color,$border-color) {
	color: $font-color;
	background-color: $background-color;
	border-color: $border-color;
}

@mixin ellipsis($display: inline-block, $max-width: 100%) {
	display: $display;
	overflow: hidden;
	max-width: $max-width;
	white-space: nowrap;
	word-break: normal;
	word-wrap: normal;
	text-overflow: ellipsis;
}

// strip unit
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@mixin multiline-ellipsis($lines: 2, $font-size: $base-font-size, $line-height: $base-line-height, $display:block){
	@if unit($font-size) == 'rem' {
		$font-size-number : strip-unit($font-size) * 10 !global;
	}

	overflow:hidden;
	display:$display;
	display:-webkit-box;
	max-height:$font-size-number * $line-height * $lines + px;
	font-size:$font-size;
	text-overflow:ellipsis;
	line-height:$line-height;
	-webkit-line-clamp:$lines;
	-webkit-box-orient:vertical;
}


// @mixin bar($height: $M-bar-height, $background: $M-bar-color) {
// 	margin: -1px 7px 1px 0;
// 	display: inline-block;
// 	width: 1px;
// 	height: $height + px;
// 	background-color: $background;
// 	overflow: hidden;
// 	color: rgba(0,0,0,0);
// 	vertical-align: middle;
// }

// 임시사용
// -------------------------
@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

@mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
	position: fixed;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

// Mobile Only: flex
// -------------------------
//flex
@mixin flex {
	display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
	display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
	display: flex;             /* iOS 7.1+, android 4.4+ */
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin flex-align($value) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
	text-align: $value;
}

@mixin flex-justify($value) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

@mixin flexGroup($value: h){
	@include flex;

	@if $value == h {
		@include flex-direction(row);
		@include flex-justify(space-around);

		> div {
			@include flex;
			@include flex-align(center);
			@include flex-justify(center);
			@include flex-grow(1);
		}
	} @else if $value == v {
		@include flex-direction(column);
	}
}

@mixin opacity($value) {
	opacity: $value;
	filter: alpha(opacity=($value * 100));
}

// 폰트 사이즈 rem 또는 px 사용 시 바로 변경
$defaultSize: 10px;
$defaultSize-tablet: 12px;

@function sizeSet($num) {
	@if $string != 'rem' {
		@return  #{$num * $defaultSize}#{$string};
	} @else {
		@return #{$num}#{$string};
	}
}
//placeholder 스타일 지정
@mixin input-placeholder($color){
	&.placeholder {
		color: $color;
	}
	&:-moz-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
}